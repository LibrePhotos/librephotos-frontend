import { ActionIcon, Group, Loader } from "@mantine/core";
import { createStyles } from "@mantine/emotion";
import {
  IconEye as Eye,
  IconEyeOff as EyeOff,
  IconGlobe as Globe,
  IconInfoCircle as InfoCircle,
  IconPlayerPause as PlayerPause,
  IconPlayerPlay as PlayerPlay,
  IconStar as Star,
} from "@tabler/icons-react";
import React from "react";

import { shareAddress } from "../../api_client/apiClient";
import { useSetFavoritePhotosMutation } from "../../api_client/photos/favorite";
import { useSetPhotosHiddenMutation, useSetPhotosPublicMutation } from "../../api_client/photos/visibility";
import { playerActions } from "../../store/player/playerSlice";
import { useAppDispatch, useAppSelector } from "../../store/store";
import { copyToClipboard } from "../../util/util";

const useStyles = createStyles((theme, _, u) => ({
  button: {
    [u.light]: {
      color: theme.colors.dark[0],
    },
    [u.dark]: {
      color: theme.colors.black,
    },
    "&:hover": {
      [u.light]: {
        color: theme.colors.grey[3],
      },
      [u.dark]: {
        color: theme.colors.white,
      },
    },
  },
}));

type Props = Readonly<{
  photosDetail: any;
  isPublic: boolean;
  lightboxSidebarShow: boolean;
  closeSidepanel: () => void;
}>;

export function Toolbar(props: Props) {
  const dispatch = useAppDispatch();
  const { favorite_min_rating: favoriteMinRating } = useAppSelector(store => store.user.userSelfDetails);
  const { photosDetail, isPublic, lightboxSidebarShow, closeSidepanel } = props;
  const { playing: playerPlaying, loading: playerLoading } = useAppSelector(store => store.player);
  const [setPhotosHidden] = useSetPhotosHiddenMutation();
  const [setPhotosPublic] = useSetPhotosPublicMutation();
  const [setFavoritePhotos] = useSetFavoritePhotosMutation();
  const { classes } = useStyles();

  function playButton(photo) {
    if (!photo || photo.embedded_media.length === 0) {
      return null;
    }
    function togglePlay() {
      if (playerPlaying) {
        dispatch(playerActions.pause());
      } else {
        dispatch(playerActions.play());
      }
    }
    return (
      <ActionIcon className={classes.icon} onClick={() => togglePlay()} variant="transparent">
        {playerLoading && <Loader color="grey" />}
        {!playerLoading && playerPlaying ? <PlayerPause /> : <PlayerPlay />}
      </ActionIcon>
    );
  }

  return (
    <Group style={{ paddingBottom: 10, paddingRight: 5 }}>
      {!photosDetail && !isPublic && (
        <ActionIcon loading variant="transparent">
          <Eye color="grey" />
        </ActionIcon>
      )}
      {!photosDetail && !isPublic && (
        <ActionIcon loading variant="transparent">
          <Star color="grey" />
        </ActionIcon>
      )}
      {!photosDetail && !isPublic && (
        <ActionIcon loading variant="transparent">
          <Globe color="grey" />
        </ActionIcon>
      )}
      {playButton(photosDetail)}
      {photosDetail && !isPublic && (
        <ActionIcon
          variant="transparent"
          onClick={() => {
            const { image_hash: imageHash } = photosDetail;
            const val = !photosDetail.hidden;
            setPhotosHidden({ image_hashes: [imageHash], hidden: val });
          }}
        >
          {photosDetail.hidden ? <EyeOff color="red" /> : <Eye color="grey" />}
        </ActionIcon>
      )}
      {photosDetail && !isPublic && (
        <ActionIcon
          variant="transparent"
          onClick={() => {
            const { image_hash: imageHash } = photosDetail;
            const val = !(photosDetail.rating >= favoriteMinRating);
            setFavoritePhotos({ image_hashes: [imageHash], favorite: val });
          }}
        >
          <Star color={photosDetail.rating >= favoriteMinRating ? "yellow" : "grey"} />
        </ActionIcon>
      )}
      {photosDetail && !isPublic && (
        <ActionIcon
          variant="transparent"
          onClick={() => {
            const { image_hash: imageHash } = photosDetail;
            const val = !photosDetail.public;
            setPhotosPublic({ image_hashes: [imageHash], val_public: val });
            copyToClipboard(
              // edited from serverAddress.replace('//','') + "/media/thumbnails_big/" + image_hash + ".jpg"
              // as above removed the domain and just left /media/thumbnails_big/" + image_hash + ".jpg"  *DW 12/9/20
              // Not location of shared photo link Reverted to orgiinal *DW 12/13/20
              // Removed the .jpg as this is not a real link, now it is having webp as extension generated by the link *VARET 07/25/22
              `${shareAddress}/media/thumbnails_big/${imageHash}`
            );
          }}
        >
          <Globe color={photosDetail.public ? "green" : "grey"} />
        </ActionIcon>
      )}
      <ActionIcon onClick={() => closeSidepanel()} variant="transparent">
        <InfoCircle color={lightboxSidebarShow ? "white" : "grey"} />
      </ActionIcon>
    </Group>
  );
}
